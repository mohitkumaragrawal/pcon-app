generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  username String?
  gender   String?

  accounts          Account[]
  sessions          Session[]
  Blog              Blog[]
  UserRoles         UserRoles[]
  SocialMediaHandle SocialMediaHandle[]
}

model SocialMediaHandle {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  type   String
  handle String
  userId String
}

model UserRoles {
  id     String @id @default(cuid())
  userId String
  role   String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, role])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Blog {
  id String @id @default(cuid())

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  title            String
  shortDescription String?
  content          String

  BlogTag     BlogTag[]
  Event       Event[]
  Achievement Achievement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogTag {
  blog   Blog   @relation(fields: [blogId], references: [id])
  blogId String
  tag    String

  @@unique([blogId, tag])
}

model Image {
  id          String        @id @default(cuid())
  title       String
  width       Int
  height      Int
  imageUrl    String
  mediumUrl   String
  thumbUrl    String
  deleteUrl   String
  Event       Event[]
  Achievement Achievement[]
}

model Event {
  id    String @id @default(cuid())
  title String

  poster        Image  @relation(fields: [posterImageId], references: [id])
  posterImageId String

  blog   Blog   @relation(fields: [blogId], references: [id])
  blogId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Achievement {
  id    String @id @default(cuid())
  title String

  poster        Image  @relation(fields: [posterImageId], references: [id])
  posterImageId String

  blog   Blog   @relation(fields: [blogId], references: [id])
  blogId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
